
#Область ПрограммныйИнтерфейс_ОбщегоИспользования

Функция СтрокаПробелов(Число) Экспорт
    Возврат СтрЗаменить(Лев(СтрЗаменить(Формат(1, "ЧВН=; ЧГ=0; ЧЦ=" + Число), "1", "0"), Число), "0",Символ(32));
КонецФункции

Функция ШтампВремени() Экспорт
    Возврат СтрЗаменить(СтрЗаменить(СтрЗаменить(Строка(ТекущаяДата()),".",""),":",""),Символ(32),"");
КонецФункции 

Функция НормализоватьТекст(Текст,МеткаEndOfText = Истина,СтрокаСлов ="")  Экспорт
    КодАлгоритма = СтрЗаменить(Текст,Символы.Таб," ");
    //КодАлгоритма = СтрЗаменить(КодАлгоритма,Символы.ПС," ^ ");
    //КодАлгоритма = СтрЗаменить(КодАлгоритма,"="," = ");
    //КодАлгоритма = СтрЗаменить(КодАлгоритма,"+"," + ");
    //КодАлгоритма = СтрЗаменить(КодАлгоритма,"<"," < ");
    //КодАлгоритма = СтрЗаменить(КодАлгоритма,">"," > ");
    //КодАлгоритма = СтрЗаменить(КодАлгоритма,";"," ; ");

    Для А = 0 по Окр(Sqrt(СтрЧислоВхождений(КодАлгоритма,"  ")),0) Цикл
        КодАлгоритма = СтрЗаменить(КодАлгоритма,"  "," ");
    КонецЦикла;
    КодАлгоритма = СтрЗаменить(КодАлгоритма,"< =","<=");
    КодАлгоритма = СтрЗаменить(КодАлгоритма,"> =",">=");
    КодАлгоритма = СтрЗаменить(КодАлгоритма,"< >","<>");
    МассивСлов =  СтрРазделить(КодАлгоритма," ");
    СтрокаСловПоумолчанию ="Возврат,И,Или,Не,Если,Тогда,КонецЕсли,Для,Каждого,Из,Пока,Цикл,КонецЦикла";
    МассивСлужебныхСлов = СтрРазделить(?(ПустаяСтрока(СтрокаСлов),СтрокаСловПоумолчанию,СтрокаСлов), ",") ;
    Для  Слово = 0  По МассивСлов.ВГраница() Цикл
        Для  Каждого СлужебноеСлово Из МассивСлужебныхСлов Цикл
            Если НРег(СокрЛП(МассивСлов[Слово])) = НРег(СлужебноеСлово) Тогда 
               МассивСлов[Слово]  = СлужебноеСлово;   
            КонецЕсли;
        КонецЦикла;
    КонецЦикла;
    КодАлгоритма = СтрСоединить(МассивСлов," ");
    КодАлгоритма = СтрЗаменить(КодАлгоритма,"^", Символы.ПС);
    Если МеткаEndOfText  И Найти(КодАлгоритма,"~EndOfText:") = 0 Тогда
        КодАлгоритма = КодАлгоритма+Символы.ПС+"~EndOfText:";	
    КонецЕсли;
    Возврат КодАлгоритма;
КонецФункции

Функция МассивИсключаемыхСимволов() Экспорт
    мИсключая = СтрРазделить(";,+, = ,-,),(,.,[,],{,},|,/,\,>,<,$,@,#",",");
    мИсключая.Добавить(Символы.ПС);
    мИсключая.Добавить(Символы.Таб);
    мИсключая.Добавить(Символ(32));
    мИсключая.Добавить(",");
    мИсключая.Добавить("""");
    Возврат мИсключая;
КонецФункции

Процедура пЗаменаВставка(КодАлг,Префикс,До="",После="",Исключая="",Включая ="") Экспорт
    Пока Найти(КодАлг,Префикс)>0 Цикл
        Слово = ПолучитьПервоеВхождениеСловоБезПрефикса(КодАлг,Префикс,Исключая,Включая);
        КодАлг = СтрЗаменить(КодАлг,Префикс+Слово,До+Слово+После);
    КонецЦикла;
КонецПроцедуры

Функция фЗаменаВставка(Знач КодАлг,Префикс,До="",После="",Исключая="",Включая ="") Экспорт
    Пока Найти(КодАлг,Префикс)>0 Цикл
        Слово = ПолучитьПервоеВхождениеСловоБезПрефикса(КодАлг,Префикс,Исключая,Включая);
        КодАлг = СтрЗаменить(КодАлг,Префикс+Слово,До+Слово+После);
    КонецЦикла;
    Возврат КодАлг;
КонецФункции

Функция ПолучитьПервоеВхождениеСловоБезПрефикса(Строка,Преф,Исключая = ";,+, = ,-,),(,.,[,],{,},|,/,\,>,<",Включая ="") Экспорт
    ДлинаПреф = СтрДлина(Преф);
    ПозПрефикс = СтрНайти(Строка,Преф)+ДлинаПреф;
    
    Если ТипЗнч(Включая) =Тип("Массив") Тогда
        мВключая = Включая;
    Иначе
        мВключая = СтрРазделить(Включая,",");
    КонецЕсли;
    
    Если ТипЗнч(Исключая) =Тип("Массив") Тогда
        мИсключая = Исключая;
    Иначе
        мИсключая = СтрРазделить(Исключая,",");
    КонецЕсли;

    мТерм = Новый Массив;
    Для Каждого СимволИсключая Из мИсключая Цикл
        Если мВключая.Найти(СимволИсключая) = Неопределено Тогда 
            мТерм.Добавить(СтрНайти(Сред(Строка, ПозПрефикс),СимволИсключая));
        КонецЕсли;
    КонецЦикла;
    
    Терм = 1000000 ;
    Для каждого Элемент Из мТерм Цикл
        Если Элемент > 0 И Элемент < Терм Тогда 
            Терм = Элемент;
        КонецЕсли;
    КонецЦикла;
    
    Слово = ?(Терм < 1000000, Сред(Строка, Найти(Строка,Преф) + ДлинаПреф, Терм - 1),Сред(Строка, Найти(Строка,Преф) + ДлинаПреф));
    Возврат Слово;
КонецФункции

Функция СтрокаВМассив(Строка,Разделитель) Экспорт
    Возврат СтрРазделить(Строка,Разделитель);
КонецФункции 

Функция ПолучитьСиноним(Знач Строка) Экспорт 
    СтрокаСокрЛП = СокрЛП(Строка);
    Синоним = ""; 
    Заглавные = "АБВГДЕЁЖЗИКЛМНОПРСТФХЦЧЩЭЮЯABCDIFGHIJKLMNOPQRSTUVWXYZ";
    До = Истина;
    Для Ё = 1 По СтрДлина(СтрокаСокрЛП) Цикл 
        Символ = Сред(СтрокаСокрЛП,Ё,1); 
        После = Ё < СтрДлина(СтрокаСокрЛП) И СтрНайти(Заглавные, Сред(СтрокаСокрЛП,Ё + 1, 1))> 0; 
        Если СтрНайти(Заглавные,Символ) > 0 Тогда 
            Синоним = Синоним + ?(До, "", Символ(32)) + ?(До ИЛИ После, Символ, НРег(Символ));
            До = Истина ;
        Иначе 
            Синоним = Синоним + Символ;
            До = Ложь;
        КонецЕсли; 
    КонецЦикла;
    Возврат Синоним; 
КонецФункции // ПолучитьСиноним()

Функция СклеитьСтроку(Знач Строка) Экспорт
    
    // получить верное имя переменной из строки
    Строка = СтрЗаменить(СтрЗаменить(СтрЗаменить(СокрЛП(Строка),Символы.Таб,""),Символы.ПС,""),Символ(32),""); 
    СтрИсключая = "0123456789,+=-)(.:[]{}|/\><$@#`""~*^%№?"; 
    Курсор = СтрДлина(Строка);
    СтрокаВ = "";
    
    Пока Курсор > 0 Цикл
        
        Если СтрНайти(СтрИсключая,Сред(Строка,Курсор,1)) = 0 Тогда
            
            СтрокаВ = Сред(Строка,Курсор,1) + СтрокаВ;
        КонецЕсли; 
        
        Курсор = Курсор -1; 
    КонецЦикла;
    
    Возврат СтрокаВ; 
КонецФункции // ПолучитьСиноним()

Функция ЭтоLinux()   Экспорт
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Возврат  СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64 ИЛИ СистемнаяИнформация.ТипПлатформы =ТипПлатформы.Linux_x86;
КонецФункции

//Вставка строк текста  в многострочный текст
Функция СтрокиСлева(Текст,УникальныйТекст) Экспорт
    НачалоУникТекста = СтрНайти(Текст,УникальныйТекст);
    ТекстСлева =  Лев(Текст,НачалоУникТекста-1);
    ПереносСлева = Мин(НачалоУникТекста-1,СтрНайти(ТекстСлева,Символы.ПС,НаправлениеПоиска.СКонца));
    Возврат Лев(Текст,ПереносСлева);
КонецФункции
Функция СтрокиСправа(Текст,УникальныйТекст) Экспорт
    КонецУникТекста = СтрНайти(Текст,УникальныйТекст)+СтрДлина(УникальныйТекст)-1;
    ТекстСправа = Сред(Текст,КонецУникТекста+1) ;
    ПереносСправа = СтрНайти(ТекстСправа,Символы.ПС);
    Возврат ?(ПереносСправа=0,ТекстСправа,Сред(ТекстСправа,ПереносСправа));
КонецФункции

Функция ВставитьМежду(Текст,УникальныйТекст,Преф,Суфф) Экспорт 
    Л = СтрокиСлева(Текст,УникальныйТекст); 
    П = СтрокиСправа(Текст,УникальныйТекст); 
    Возврат Л + Преф + УникальныйТекст + Суфф +П;
КонецФункции


#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс_Алгоритмы

Функция ПреобразоватьТекстВКодАлгоритма(Текст) Экспорт 
    ПодключитьДекораторыКода(Текст);
    КодАлгоритма = НормализоватьТекст(Текст);
    мИсключая = МассивИсключаемыхСимволов();
    // отображение в коде
    // часто используемая конструкция
    КодАлгоритма = СтрЗаменить(СтрЗаменить(КодАлгоритма,"%)",")"),"(%","Новый Структура(");
    // выполнение  текущего контекста
    КодАлгоритма = СтрЗаменить(КодАлгоритма,"__local","ВыполнитьЛокальныйКонтекст");
    // возвращает  значение функции на сервере
    пЗаменаВставка(КодАлгоритма,"__фз","_37583_АлгоритмыСервер.ВыполнитьФункцию","[""Результат""]",мИсключая);
    // возвращает  значение функции на клиенте __фзк($алгоритм,Новый Структура("",ЗначениеПараметра))
    пЗаменаВставка(КодАлгоритма,"__фзк","_37583_АлгоритмыКлиент.ВыполнитьФункцию","[""Результат""]",мИсключая);
    // Выполнение процедуры на клиенте
    КодАлгоритма = СтрЗаменить(КодАлгоритма,"__пк","_37583_АлгоритмыКлиент.ВыполнитьПроцедуру");
    // возвращает результат выполнения функции (соответствие) на клиенте
    КодАлгоритма = СтрЗаменить(КодАлгоритма,"__фк","_37583_АлгоритмыКлиент.ВыполнитьФункцию");
    // Выполнение процедуры на сервере
    КодАлгоритма = СтрЗаменить(КодАлгоритма,"__п","_37583_АлгоритмыСервер.ВыполнитьПроцедуру");
    // возвращает результат выполнения функции (соответствие) на сервере
    КодАлгоритма = СтрЗаменить(КодАлгоритма,"__ф","_37583_АлгоритмыСервер.ВыполнитьФункцию");
    КодАлгоритма = СтрЗаменить(КодАлгоритма,"__ПеременныеСреды","_37583_АлгоритмыКэш.ПолучитьПараметры_37583()");
    пЗаменаВставка(КодАлгоритма,"#","[""","""]",мИсключая);
    пЗаменаВставка(КодАлгоритма,"__.","this[""","""]",мИсключая);
    КодАлгоритма = СтрЗаменить(КодАлгоритма,"$","Параметры");
    КодАлгоритма = СтрЗаменить(КодАлгоритма,"Возврат ;","Перейти ~EndOfText;");
    пЗаменаВставка(КодАлгоритма,"Возврат ","this[""Результат""] = ","; Перейти ~EndOfText",";"," ");
    Возврат КодАлгоритма;
КонецФункции

Процедура ПодключитьДекораторыКода(Текст)

	

КонецПроцедуры
 

Функция СвойстваДоступныеНаКлиентеИНаСервере () Экспорт
	СвойстваДоступныеНаКлиентеИНаСервере =  Новый Структура();
	СвойстваДоступныеНаКлиентеИНаСервере.Вставить("Ссылка",Неопределено);
	СвойстваДоступныеНаКлиентеИНаСервере.Вставить("Наименование","-");
	СвойстваДоступныеНаКлиентеИНаСервере.Вставить("КодАлгоритма","");
	СвойстваДоступныеНаКлиентеИНаСервере.Вставить("КодЗавершения","");
	СвойстваДоступныеНаКлиентеИНаСервере.Вставить("ТолькоТекст",Ложь);
	СвойстваДоступныеНаКлиентеИНаСервере.Вставить("ВыбрасыватьИсключение",Истина);
	СвойстваДоступныеНаКлиентеИНаСервере.Вставить("ЗаписыватьОшибкиВЖР",Истина);
	СвойстваДоступныеНаКлиентеИНаСервере.Вставить("ЗаписыватьСобытиияВЖР",Ложь);
	СвойстваДоступныеНаКлиентеИНаСервере.Вставить("Отказ",Ложь);
	
	Возврат СвойстваДоступныеНаКлиентеИНаСервере;
КонецФункции

#КонецОбласти

