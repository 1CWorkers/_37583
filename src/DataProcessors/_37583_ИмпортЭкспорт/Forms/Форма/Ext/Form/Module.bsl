

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    ВывестиДеревоСправочника();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
    ВидимостьИДоступность();
КонецПроцедуры

&НаСервере
Процедура ВывестиДеревоСправочника()
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |	_37583_ALG.Ссылка КАК Алгоритм,
    |	ВЫБОР
    |		КОГДА _37583_ALG.ЭтоГруппа
    |			ТОГДА 0
    |		ИНАЧЕ 1
    |	КОНЕЦ КАК Группа,
    |	_37583_ALG.Комментарий,
    |	_37583_ALG.Теги,
    |	ЛОЖЬ КАК Пометка
    |ИЗ
    |	Справочник._37583_ALG КАК _37583_ALG
    |ИТОГИ ПО
    |	Алгоритм ИЕРАРХИЯ";
    
    РезультатЗапроса = Запрос.Выполнить();
    
    
    ВыборкаСИерархией=РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией,"Алгоритм");
    Дерево = ДанныеФормыВЗначение(ДеревоСправочника,Тип("ДеревоЗначений"));
    Дерево.Строки.Очистить();
    ВыбратьЭлементыВИерархии(ВыборкаСИерархией,Дерево);	
    ЗначениеВДанныеФормы(Дерево,ДеревоСправочника);
    
    
КонецПроцедуры // ВывестиДеревоСправочника()

&НаСервере
Процедура ВыбратьЭлементыВИерархии(ВыборкаСИерархией,Дерево,АлгоритмРодитель = Неопределено)
    Пока ВыборкаСИерархией.Следующий() Цикл
        Если ВыборкаСИерархией.ТипЗаписи()=ТипЗаписиЗапроса.ИтогПоИерархии Тогда
            Строка=Дерево.Строки.Добавить();
            ЗаполнитьЗначенияСвойств(Строка,ВыборкаСИерархией);
            ВыбратьЭлементыВИерархии (ВыборкаСИерархией.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией,"Алгоритм"),Строка,ВыборкаСИерархией.Алгоритм);
        ИначеЕсли ВыборкаСИерархией.ТипЗаписи()=ТипЗаписиЗапроса.ИтогПоГруппировке И ВыборкаСИерархией.Алгоритм <> АлгоритмРодитель Тогда
            Выборка=ВыборкаСИерархией.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
            Пока Выборка.Следующий() Цикл
                Строка=Дерево.Строки.Добавить();
                ЗаполнитьЗначенияСвойств(Строка,Выборка);
            КонецЦикла;
        КонецЕсли;
    КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура кВыполнить(Команда)
    Если ИмпортЭкспорт = 1  Тогда
        ЭкспортФайлов();
    Иначе
        ИмпортФайлов();
    КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ИмпортЭкспортПриИзменении(Элемент)
ВидимостьИДоступность();    
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьИДоступность()
    Элементы.ДеревоСправочника.Видимость = ИмпортЭкспорт = 1;
    Элементы.Каталог.Видимость = ИмпортЭкспорт = 1;
    Элементы.ГруппаСправочника.Видимость = ИмпортЭкспорт = 0;
КонецПроцедуры


#Область ИмпортЭкспорт
//Импорт
&НаКлиенте
Процедура ИмпортФайлов()
    Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
    Диалог.Заголовок = "Выберите файл";
    Диалог.ПолноеИмяФайла = ""; 
    Фильтр = "XML файлы  (*.xml)|*.xml"; 
    Диалог.Фильтр = Фильтр; 
    Диалог.МножественныйВыбор = Истина;
    Диалог.Показать(Новый ОписаниеОповещения("ВнешнийФайлНачалоВыбораЗавершение", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура ВнешнийФайлНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
    Если (ТипЗнч(ВыбранныеФайлы) = Тип("Массив") И  ВыбранныеФайлы.Количество() > 0 ) Тогда
        Для каждого ВнешнийФайл Из ВыбранныеФайлы Цикл
            ОписаниеОповещения = Новый ОписаниеОповещения("ЗакончитьПомещениеФайла", ЭтотОбъект);		
            НачатьПомещениеФайла(ОписаниеОповещения, , ВнешнийФайл, Ложь, Новый УникальныйИдентификатор);
        КонецЦикла; 
    Иначе
        _37583_АлгоритмыКлиент.PopUp(" нет  выбранных файлов ");
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьПомещениеФайла(Результат, АдресХранилища, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
    Если Результат Тогда
        ПрочитатьНаСервере(АдресХранилища,ДополнительныеПараметры);
    Иначе
        Сообщить("Ошибка помещения файла в хранилище");
    КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНаСервере(АдресХранилища,  ДополнительныеПараметры)
    Попытка
        ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресХранилища);	
        Поток = ДвоичныеДанные.ОткрытьПотокДляЧтения();	
        ЧтениеXML = новый ЧтениеXML;
        ЧтениеXML.ОткрытьПоток(Поток);
        Алгоритм = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
        Если Не ГруппаСправочника.Пустая() Тогда 
            Алгоритм.Родитель = ГруппаСправочника;
        КонецЕсли;
        Алгоритм.Записать();
        Сообщить("алгоритм "+Алгоритм.Наименование+" записан");
    Исключение
        ВызватьИсключение "Ошибка чтения файла XLM : " + ОписаниеОшибки();
    КонецПопытки;
КонецПроцедуры // ПрочитатьНаСервере()

//Экспорт

&НаКлиенте
Процедура КаталогНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    СтандартнаяОбработка=ложь;
    Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
    Диалог.Заголовок = "Выберите каталог";
    Диалог.МножественныйВыбор = Ложь;
    Диалог.Показать(Новый ОписаниеОповещения("ВыборКталогаЗавершение", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура ВыборКталогаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
    Если ВыбранныеФайлы.Количество() > 0 Тогда
        Каталог = ВыбранныеФайлы[0];
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЭкспортФайлов ()  
    Если ПустаяСтрока(Каталог) Тогда 
        Возврат;
    КонецЕсли;
    ВыборЭлементовРекурсивно (ДеревоСправочника) ;
КонецПроцедуры 

&НаКлиенте
Процедура ВыборЭлементовРекурсивно (СтрокаДерева)  
    Для Каждого Элемент Из СтрокаДерева.ПолучитьЭлементы() Цикл
        Если Элемент.Пометка Тогда 
            АдресХранилища = ПолучитьФайлНаСервере(Элемент.Алгоритм,Истина); 
            Оповещение = Новый ОписаниеОповещения("ПослеПолученияФайла", ЭтотОбъект); 
            ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(); 
            ОписаниеФайла.Хранение = АдресХранилища; 
            ОписаниеФайла.Имя = Каталог+?(_37583_ОбщегоНазначенияКлиентСервер.ЭтоLinux(),"/","\") + ИмяСсылки(Элемент.Алгоритм) ; 
            ПолучаемыеФайлы = Новый Массив; 
            ПолучаемыеФайлы.Добавить(ОписаниеФайла); 
            НачатьПолучениеФайлов(Оповещение, ПолучаемыеФайлы,, Ложь); 
        КонецЕсли; 
        Если Элемент.Группа = 0 Тогда
            ВыборЭлементовРекурсивно (Элемент);
        КонецЕсли;
    КонецЦикла; 
КонецПроцедуры 


&НаКлиенте
Функция ИмяСсылки(АлгоритмСсылка)
    Имя = СтрЗаменить(Строка(АлгоритмСсылка), Символ(32), "_");
    GUID  = Строка(АлгоритмСсылка.УникальныйИдентификатор());
    Возврат Имя+"_"+GUID+ ".xml";
КонецФункции // ИмяСсылки()

&НаСервере
Функция ПолучитьФайлНаСервере(Алгоритм,ВыгрузитьXML)
    ВыбПараметр = Алгоритм.ПолучитьОбъект();
    ЗаписьXML = Новый ЗаписьXML;
    Поток = Новый ПотокВПамяти;
    ЗаписьXML.ОткрытьПоток(Поток);
    СериализаторXDTO.ЗаписатьXML(ЗаписьXML,ВыбПараметр);
    ЗаписьXML.Закрыть();
    ДвоичныеДанные = Поток.ЗакрытьИПолучитьДвоичныеДанные();
    АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор);
    Возврат АдресХранилища;
КонецФункции

&НаКлиенте
Процедура ПослеполученияФайла(ПолученныеФайлы, ДопПараметры) Экспорт
    Если ТипЗнч(ПолученныеФайлы) = Тип("Массив")	Тогда
        Сообщить("Файл " + ПолученныеФайлы[0].Имя + " записан"); 
    КонецЕсли; 
КонецПроцедуры


#КонецОбласти 



